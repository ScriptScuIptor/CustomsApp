import java.io.*;
import java.net.Socket;

public class ClientHandler extends Thread {
    private Socket clientSocket;

    public ClientHandler(Socket socket) {
        this.clientSocket = socket;
    }

    @Override
    public void run() {
        try (
                InputStream input = clientSocket.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(input));
                OutputStream output = clientSocket.getOutputStream();
                PrintWriter writer = new PrintWriter(output, true)
        ) {
            writer.println("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:");
            String username = reader.readLine();
            writer.println("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
            String password = reader.readLine();

            User user = DatabaseManager.findUserByUsername(username);
            if (user == null || !user.getPasswordHash().equals(PasswordHasher.hashPassword(password))) {
                writer.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ.");
                clientSocket.close();
                return;
            }

            writer.println("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í–∞—à–∞ —Ä–æ–ª—å: " + user.getRole());
            writer.println("‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:");

            String command;
            while ((command = reader.readLine()) != null) {
                System.out.println("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: " + command);

                String[] parts = command.split(" ");
                if (parts.length >= 3 && "ADD_DRIVER".equals(parts[0])) {
                    String name = parts[1] + " " + parts[2];
                    String licenseNumber = parts[3];

                    DatabaseManager.addDriver(name, licenseNumber);
                    writer.println("‚úÖ –í–æ–¥–∏—Ç–µ–ª—å " + name + " –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–æ–º–µ—Ä–æ–º " + licenseNumber);
                } else {
                    writer.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ADD_DRIVER [–§–∞–º–∏–ª–∏—è –ò–º—è] [–ù–æ–º–µ—Ä_–ª–∏—Ü–µ–Ω–∑–∏–∏]");
                }
            }

            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}